// we have to find the element which appears more than n/3 times from array. So we will use BORE MOOREY algorithm.
This algorithm can be used to return the highest K elements that appeared in the array more than array_size/(K+1) times.
we create a hashmap to count occurence then  create alist and initialse variable threhold after that we traverrse the map to 
check occurrence of those element that are greaterr than threshold and addd it to list.

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        HashMap <Integer , Integer> map = new HashMap<> ();
        int n = nums.length;

        for(int i = 0; i <n ; i++){
            map.put(nums[i] , map.getOrDefault(nums[i] ,0) + 1);
        }
            List<Integer> majorityElements = new ArrayList<> ();
            int threshold = nums.length / 3 ;

            for(Map.Entry <Integer, Integer> entry : map.entrySet()){
                int element =  entry.getKey();
                int count = entry.getValue();

                if(count > threshold) {
                    majorityElements.add(element);
                }
            }   
    
        return majorityElements;
    }
}
